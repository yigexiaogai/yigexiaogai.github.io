<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gai&#39;s blog</title>
  
  <subtitle>欢迎来到小该的博客</subtitle>
  <link href="https://yigexiaogai.github.io/atom.xml" rel="self"/>
  
  <link href="https://yigexiaogai.github.io/"/>
  <updated>2022-04-05T09:23:37.013Z</updated>
  <id>https://yigexiaogai.github.io/</id>
  
  <author>
    <name>Gai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习实战（二）</title>
    <link href="https://yigexiaogai.github.io/2022/04/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://yigexiaogai.github.io/2022/04/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2022-04-05T05:08:44.000Z</published>
    <updated>2022-04-05T09:23:37.013Z</updated>
    
    <content type="html"><![CDATA[<h1>基础数学知识</h1><h1>机器学习中的函数</h1><p>**机器学习基本上等价于寻找函数的过程。**机器学习的目的是进行预测、判断，实现某种功能。通过学习训练集中的数据，计算机得到一个从x到y的拟合结果，也就是函数。<br>例如：<br>$ f(x)=1亿元$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;基础数学知识&lt;/h1&gt;
&lt;h1&gt;机器学习中的函数&lt;/h1&gt;
&lt;p&gt;**机器学习基本上等价于寻找函数的过程。**机器学习的目的是进行预测、判断，实现某种功能。通过学习训练集中的数据，计算机得到一个从x到y的拟合结果，也就是函数。&lt;br&gt;
例如：&lt;br&gt;
$ f(x)=1亿元</summary>
      
    
    
    
    <category term="人工智能学习路线" scheme="https://yigexiaogai.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    
    <category term="从零开始机器学习" scheme="https://yigexiaogai.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="人工智能" scheme="https://yigexiaogai.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="机器学习，毕设相关" scheme="https://yigexiaogai.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%8C%E6%AF%95%E8%AE%BE%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>机器学习实战（一）</title>
    <link href="https://yigexiaogai.github.io/2022/04/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://yigexiaogai.github.io/2022/04/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-04-02T12:50:39.000Z</published>
    <updated>2022-04-05T08:45:32.782Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>作者大四在读，恰逢毕设时间，毕设选题将会以GAN技术（生成式对抗网络技术）为核心展开工作。然而作者在这之前，并没有任何与智能图片生成——也就是“有关于深度学习的图像生成技术”打过交道。作者首先接触到了<a href="https://www.bilibili.com/video/BV1Up411R7Lk?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">B站台湾大学李宏毅教授的GAN课程</a>，奈何缺乏基本的机器学习、神经网络、深度学习等前要知识，听到第二节课就已经云里雾里了（很烦~），最后我决定从头开始，毕竟磨刀不误砍柴工，打好基础才能实现上层目标。根据人工智能领域的分支关系图，我决定先从<strong>机器学习</strong>开始。</p><h1>学习路线（机器学习）</h1><h2 id="网课（理论）">网课（理论）</h2><p>理论部分我采用网课形式。在阿里巴巴旗下的子平台<a href="https://edu.aliyun.com/developer">阿里云全球培训中心：开发者课堂</a>中有着众多领域的学习路线，其中包含<a href="https://edu.aliyun.com/roadmap/ai">人工智能学习路线</a>，阶段一即是机器学习入门。</p><img src="/2022/04/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.png" class><p>网课老师语速和节奏较慢，关键是在一些概念性的问题上讲解通俗易懂。不过到中期算法讲解之后，由于学习机器学习数学知识非常必要，内容不可能轻易让人理解。（学习机器学习前，数学中的<strong>线性代数</strong>和<strong>概率统计</strong>是非常重要的内容）</p><h3 id="书籍（实战）">书籍（实战）</h3><p>其实在书籍方面，最有口皆碑的就是周志华教授的《机器学习》一书，也被称作“西瓜书”，其内容非常经典而且适合学习。</p><img src="/2022/04/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/%E8%A5%BF%E7%93%9C%E4%B9%A6.jpg" class><p>不过在作者学校的图书馆此书已经被借空，而且此书的学习实际上要求学生已经掌握了一些人工智能的基础知识，因此最后，我选择了黄佳编著的《零基础学人工智能》一书，里面包含若干个机器学习项目实例，并附有学习资源和代码。这些资源在书籍扉页可以找到(<a href="https://www.epubit.com/bookDetails?id=UB7245bf2ca7715">https://www.epubit.com/bookDetails?id=UB7245bf2ca7715</a>)。</p><h3 id="语言及框架">语言及框架</h3><p>python。这个其实也不用多说了，众所周知搞人工智能最好的编程语言。不过关于人工智能框架需要说一点，在学习过程中，机器学习主要接触的是scikit-learn库，深度学习主流的框架有三个：keras、tensorflow、pytorch。书籍中所使用的皆为keras,而我本人的项目也会涉及到tensorflow。</p><h3 id="平台及环境">平台及环境</h3><p>我使用的平台有两个，分为本地环境和线上环境。本地环境使用anaconda创建一个python环境，并安装jupyter notebook库便于写代码。但是由于各种各样的原因，在研究过程中我还需要用到一个线上平台，及google colab(需要科学上网)，colab 支持用户在google的服务器上使用jupyter notebook,而且最<strong>关键</strong>的两点是：<strong>1.你不需要特地配置keras、tensorflow等环境（本地配置的时候可能会存在各种问题，例如库版本、库间对应版本……），它已经帮你配好了，只需要开写代码就行！2.一般做机器学习项目需要电脑硬件比较好，但是colab支持用户设备不需要GPU硬件——就是你电脑没显卡也没事儿，用的是服务器的GPU,运行代码速度照样嘎嘎快（没有那么夸张）</strong></p><p>书中推荐的平台还有一个叫做<a href="https://www.kaggle.com/">kaggle</a>，该平台兴办机器学习竞赛，而且同样向平台用户提供GPU，但是每周使用有一定限制。</p><h1>实例一：加州房价预测</h1><p>该实例来源自参考书籍中，作为读者第一个接触到的实例，不需要看懂每行代码，只需要观察机器学习项目的代码结构以及思路即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># 导入Pandas，用于数据读取和处理</span></span><br><span class="line"><span class="comment"># 读取房价数据，示例代码中的文件地址为internet链接，读者也可以下载该文件到本机进行读取(见注释代码行)</span></span><br><span class="line">df_housing = pd.read_csv(<span class="string">&quot;https://raw.githubusercontent.com/huangjia2019/house/master/house.csv&quot;</span>)</span><br><span class="line"><span class="comment"># df_housing = pd.read_csv(&quot;./house.csv&quot;) # 与代码文件放在同一目录下</span></span><br><span class="line">df_housing.head() <span class="comment"># 显示加州房价数据</span></span><br></pre></td></tr></table></figure><ul><li>使用DataFrame数据结构的head方法显示数据集中的部分信息</li><li>在jupyter notebook中按ctrl+enter运行一个块儿（cell）中的代码</li></ul><img src="/2022/04/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/1.png" class><p>该数据集记录了加州各地区的房价统计信息。看到最后一列就是房价的统计结果，很直观可以看出，影响这个结果的就是前几列的因素：经度、纬度、房屋平均年龄、房屋数量、家庭收入中位数。</p><p>因此我们可以说，前面这些影响因素就是数据集的<strong>特征</strong>，最后这列我们要的结果就是<strong>标签</strong>。我们的目标呼之欲出，我们要从这个数据集中归纳（拟合）出一个函数<strong>f(经度，纬度，……，家庭收入中位数)-&gt;房价</strong>。有了这个函数之后，我们去加州随便找一个地方的房子，都能算出这个房子的价格了，然后你就能算算你买不买得起了（笑）。</p><p>现在我们就来做找函数这件事。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X = df_housing.drop(<span class="string">&quot;median_house_value&quot;</span>, axis=<span class="number">1</span>) <span class="comment"># 构建特征集</span></span><br><span class="line">y = df_housing.median_house_value <span class="comment"># 构建标签集y</span></span><br></pre></td></tr></table></figure><ul><li>在机器学习领域特征集一般用大写X表示，标签集一般用小写y表示，可能是习惯？</li><li>使用drop方法（该方法来自于pandas库中的dataframe数据结构）把最后一列字段去掉形成特征集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split <span class="comment"># 导入sklearn工具库</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">0</span>) <span class="comment"># 以80%/20%的比例拆分数据集</span></span><br></pre></td></tr></table></figure><ul><li>把数据集拆分成两块，80%的数据用于产生我们需要的函数f，另外20%的数据用于带入数据比较结果，看看这个函数找的对不对。在网课内容中，我们知道，不用整个数据集找函数是怕找到的函数<strong>过拟合</strong>——即看起来f效果不错（对该数据集来说），但假设你用额外的新数据带入,f的效果可能会不好，但这在你带入新数据前都无法知道。</li></ul><p>接下来开始训练机器，首先我们需要找一个适合该问题的模型。这里选择LinearRegression(线性回归)方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(X_train, y_train) <span class="comment"># 根据训练集数据，训练机器，拟合函数</span></span><br></pre></td></tr></table></figure><ul><li>fit方法即可以训练机器，拟合函数，函数的具体形式已经在model中了，我们没有直接看到。下面进行预测（这里参与预测的数据就是刚刚分离出来的20%的数据咯！）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">y_pred=model.predict(X_test) <span class="comment"># 预测验证集的y值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;房价的真值（测试集）&quot;</span>, y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;预测的房价（测试集）&quot;</span>, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;给预测评分：&quot;</span>, model.score(X_test, y_test)) <span class="comment"># 预测评估结果</span></span><br></pre></td></tr></table></figure><img src="/2022/04/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2.png" class title="输出结果"><ul><li>predict方法应该是用上了刚才模型训练得到的函数f，可得到y_pred。</li><li>score方法是一个机器学习模型的评估指标，给出了预测值的方差与总体方差之间的差异。根据score中的参数，个人觉得score里面应该是先用了predict方法求取了y_pred，然后进行比较。公式如图：</li></ul><img src="/2022/04/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/%E5%85%AC%E5%BC%8F.png" class><p>接下来我们使用matplotlib库把函数可视化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 用散点图显示家庭收入中位数和房价中位数的分布</span></span><br><span class="line">plt.scatter(X_test.median_income, y_test, color=<span class="string">&#x27;brown&#x27;</span>)</span><br><span class="line"><span class="comment"># 画出回归函数（从特征到预测标签）</span></span><br><span class="line">plt.plot(X_test.median_income, y_pred, color=<span class="string">&#x27;green&#x27;</span>,linewidth=<span class="number">1</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Median Income&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Median House Value&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="/2022/04/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/3.png" class><ul><li>注意图里看上去有很多线，但实际上它是一条线，因为plot只是把点与点连起来画出一条线，也就是说代码展示了median_income和y_pred的大概函数关系，大概是线性增长的。</li></ul><h1>基本机器学习术语</h1><table><thead><tr><th>术语</th><th>定义</th><th>数学描述</th><th>示例</th></tr></thead><tbody><tr><td>数据集</td><td>数据的集合</td><td>{(X~1~,y~1~), …, (X~n~,y~n~)}</td><td>1000个北京市房屋的面积、楼层、位置、朝向，以及部分房价信息的数据集</td></tr><tr><td>样本</td><td>数据集中的一条具体记录</td><td>(X~1~,y~1~)</td><td>一个房屋的数据记录</td></tr><tr><td>特征</td><td>用于描述数据的输入变量</td><td>{X~1~,X~2~, …, X~N~}也是一个向量</td><td>面积(X~1~)、楼层(X~2~)、位置(X~3~)、朝向(X~4~)</td></tr><tr><td>标签</td><td>要预测的真实事物或结果，也称为目标</td><td>y</td><td>房价</td></tr><tr><td>有标签样本</td><td>有特征、标签、用于训练模型</td><td>(X,y)</td><td>800个北京市房屋的面积、楼层、位置、朝向、以及房价信息</td></tr><tr><td>无标签样本</td><td>有特征，无标签</td><td>(X,?)</td><td>200个北京市房屋的面积、楼层、位置、朝向，但是无房价信息</td></tr><tr><td>模型</td><td>将样本的特征映射到预测标签</td><td>f(x),其实就是函数</td><td>通过面积、楼层、位置、朝向这些信息来确定房价的函数</td></tr><tr><td>模型中的参数</td><td>模型中的参数确定了机器学习的具体模型</td><td>f(x)函数的参数</td><td>如f(x)=5x+6中的5和6</td></tr><tr><td>模型的映射结果</td><td>通过模型映射出无标签样本的标签</td><td>y’</td><td>200个被预测出来的房价</td></tr><tr><td>机器学习</td><td>通过学习样本数据，发现规律，得到模型的参数，从而得到能预测目标的模型</td><td>确定f(x)和其参数的过程</td><td>确定房价预测函数和具体参数的过程</td></tr></tbody></table><blockquote><p>特征向量中有<strong>几</strong>个特征，就说明这个特征是<strong>几</strong>维特征<br>y^'^有时候也被成为y-hat，写作y上面带一个^</p></blockquote><h1>机器学习项目实战架构与MNIST数据集</h1><p>机器学习项目的实际过程主要分为以下5个环节：</p><ul><li>（1）问题定义。</li><li>（2）数据的收集和预处理</li><li>（3）模型（算法）的选择</li><li>（4）选择机器学习模型</li><li>（5）超参数调试和性能优化</li></ul><h2 id="环节一：问题定义">环节一：问题定义</h2><p>问题定义简单来说，就是你想要解决什么问题，它是否可以用机器学习的方法解决。<br>MNIST数据集相当于机器学习领域的hello world，相当经典，其中包含60000张训练图像和10000张测试图像，尺寸都为28px*28px，如下图所示。</p><img src="/2022/04/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/4.jpg" class><p>此处要解决的问题是：将手写数字灰度图像分类为0，1，2，3，4，5，6，7，8，9</p><h2 id="环节二：数据收集和预处理">环节二：数据收集和预处理</h2><p>该环节主要包括以下内容：</p><ul><li>原始数据的准备</li><li>数据的预处理</li><li>特征工程和特征提取</li></ul><h3 id="原始数据的准备">原始数据的准备</h3><p>可以是自有数据（如公司的客户信息）、使用爬虫爬取的数据、开源网站下载的数据、来自youtube和维基百科的数据……</p><h3 id="数据的预处理">数据的预处理</h3><ul><li><strong>可视化（visualization）</strong>:使用excel和各种数据分析工具（如matplotlib）从各种角度看数据。</li><li><strong>数据向量化（data vectorization）</strong>：把原始数据格式化，使其变得机器可以读取，例如把图片转换成数字矩阵，把文字转换成one-hot编码（<a href="https://www.cnblogs.com/shuaishuaidefeizhu/p/11269257.html">one-hot编码概念</a>）。</li><li>处理<strong>坏数据</strong>和<strong>缺失值</strong>：常常一组数据不是所有都能用。</li><li><strong>特征缩放（feature scaling）</strong>:常用方法有<strong>标准化（standardization）<strong>和</strong>规范化（normalization）</strong></li></ul><h3 id="特征工程和特征提取">特征工程和特征提取</h3><p>广义上仍属于数据预处理。特征提取主要需要思考以下问题：</p><blockquote><p>（1）如何选择最有用的特征给机器进行学习？<br>（2）如何把现有的特征进行转化、强化、组合，创建出来新的、更好的特征？<br>比如，对于图像数据，可以通过计算直方图来统计图像中像素强度的分布，得到描述图像颜色的特征。</p></blockquote><h3 id="实例：载入MNIST数据集">实例：载入MNIST数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> mnist <span class="comment"># 从keras中导入MNIST数据集</span></span><br><span class="line"><span class="comment"># 读入训练集和测试集</span></span><br><span class="line">(X_train_image, y_train_label), (X_test_image, y_test_label) = mnist.load_data()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据集张量形状：&quot;</span>, X_train_image.shape) <span class="comment"># 用shape方法显示张量的形状</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一个数据样本：\n&quot;</span>, X_train_image[<span class="number">0</span>]) <span class="comment"># 注意python的索引是从0开始的</span></span><br></pre></td></tr></table></figure><blockquote><p>X_train_image:训练集特征——图片<br>y_train_label:训练集标签——数字<br>X_test_image:测试集特征——图片<br>y_test_label:测试集标签——数字</p></blockquote><ul><li>shape方法显示X_train_image张量的形状：60000表示60000张，28、28表示尺寸</li></ul><p>数据集在输入机器学习模型之前还要做一些数据格式转换工作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.utils <span class="keyword">import</span> to_categorical <span class="comment"># 导入keras.utils工具库的类别转换工作</span></span><br><span class="line"><span class="comment">#在kaggle可以写成from keras.utils import to_categorical，在colab需要加“tensorflow.”，似乎是tensorflow2.0版本的问题</span></span><br><span class="line">X_train = X_train_image.reshape(<span class="number">60000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>) <span class="comment"># 给标签增加一个维度</span></span><br><span class="line">X_test = X_test_image.reshape(<span class="number">10000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">y_train = to_categorical(y_train_label, <span class="number">10</span>) <span class="comment"># 特征转换为one-hot编码，10代表分成10类</span></span><br><span class="line">y_test = to_categorical(y_test_label, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练集张量形状：&quot;</span>, X_train.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一个数据标签：&quot;</span>, y_train[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/moyu123456789/article/details/83444140">to_categorical()方法介绍</a></li><li>要增加一个维度的原因：keras要求图像数据集导入卷积神经网络时为4阶张量，最后一阶代表颜色深度，灰度图像只有一个颜色通道，所以设置值为1（如果时rgb图像那就是3咯）</li><li>标签[1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]代表1，[0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]代表2，以此类推。</li></ul><h2 id="环节三：选择机器学习模型">环节三：选择机器学习模型</h2><p>常见的模型框架有以下几种：</p><ul><li>线性模型（线性回归、逻辑回归）</li><li>非线性模型（支持向量机、KNN）</li><li>基于树和集成的模型（决策树、随机森林、梯度提升树）</li><li><strong>神经网络</strong>（ANN、CNN、长短期记忆网络）</li></ul><p>在这里我们选择CNN（卷积神经网络）处理MNIST。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> models <span class="comment"># 导入Keras模型，以及各种神经网络的层</span></span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Dropout, Flatten, Conv2D, MaxPooling2D</span><br><span class="line">model = models.Sequential() <span class="comment"># 用序贯方式建立模型</span></span><br><span class="line">model.add(Conv2D(<span class="number">32</span>, (<span class="number">3</span>,<span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>, <span class="comment">#添加Conv2D层</span></span><br><span class="line">                 input_shape=(<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>))) <span class="comment"># 指定输入数据样本张量的类型</span></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>))) <span class="comment"># 添加MaxPooling2D层</span></span><br><span class="line">model.add(Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>)) <span class="comment"># 添加Conv2D层</span></span><br><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>))) <span class="comment"># 添加MaxPooling2D层</span></span><br><span class="line">model.add(Dropout(<span class="number">0.25</span>)) <span class="comment"># 添加Dropout层</span></span><br><span class="line">model.add(Flatten()) <span class="comment"># 展平</span></span><br><span class="line">model.add(Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>)) <span class="comment"># 添加全连接层</span></span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>)) <span class="comment"># 添加Dropout层</span></span><br><span class="line">model.add(Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)) <span class="comment"># Softmax分类激活，输出10维分类码</span></span><br><span class="line"><span class="comment"># 编译模型</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;rmsprop&#x27;</span>, <span class="comment"># 指定优化器</span></span><br><span class="line">              loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>, <span class="comment"># 指定损失函数</span></span><br><span class="line">              metrics=[<span class="string">&#x27;accuracy&#x27;</span>]) <span class="comment"># 指定验证过程中的评估指标</span></span><br></pre></td></tr></table></figure><ul><li>这一段我也看不懂，希望以后学了就会懂吧5555</li></ul><h2 id="环节四：训练机器，确定参数">环节四：训练机器，确定参数</h2><p>在这里我们需要确定模型<strong>内部参数</strong>，简单来说就是f(x)的形式呗。例如f(x)=2x+1，这里的2叫做<strong>权重</strong>，1叫做<strong>偏置</strong>。以后还会学到<strong>超参数</strong>一概念。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model.fit(X_train, y_train, <span class="comment"># 指定训练特征集和训练标签集</span></span><br><span class="line">          validation_split=<span class="number">0.3</span>, <span class="comment"># 部分训练集数据拆分成验证集</span></span><br><span class="line">          epochs=<span class="number">5</span>, <span class="comment"># 训练轮次为5轮</span></span><br><span class="line">          batch_size=<span class="number">128</span>) <span class="comment"># 以128为批量进行训练</span></span><br></pre></td></tr></table></figure><ul><li>以上5轮训练中，准确率会逐渐提高。</li><li>这里的5轮就是一种超参数，是可以人为定义的且与f无关，但最后仍有可能影响训练结果。</li></ul><h2 id="环节五：超参数调试和性能优化">环节五：超参数调试和性能优化</h2><p>机器学习重在评估，通过评估才能知道当前模型的效率。<br>两个重要评估点：</p><ul><li>损失函数</li><li>验证</li></ul><p>本例中的损失函数已经包含在了fit方法中了。验证则可以使用以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">score = model.evaluate(X_test, y_test) <span class="comment"># 在验证集上进行模型评估</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;测试集预测准确率：&quot;</span>, score[<span class="number">1</span>]) <span class="comment"># 输出测试集上的预测准确率</span></span><br></pre></td></tr></table></figure><blockquote><p>当然，人们看到一个准确率常常没有直观的体验，虽然说这个时候机器学习项目已经结束了。那么我们单独拿一个预测结果看看对不对。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pred = model.predict(X_test[<span class="number">3</span>].reshape(<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)) <span class="comment"># 预测测试集第4个数据</span></span><br><span class="line"><span class="built_in">print</span>(pred[<span class="number">0</span>], <span class="string">&quot;转换格式得到：&quot;</span>, pred.argmax()) <span class="comment"># 把one-hot编码转换为数字</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.imshow(X_test[<span class="number">3</span>].reshape(<span class="number">28</span>, <span class="number">28</span>), cmap=<span class="string">&#x27;Greys&#x27;</span>) <span class="comment"># 输出图片</span></span><br></pre></td></tr></table></figure><ul><li>argmax方法就是输出数组里面最大元素的索引。例如[0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]就是输出2（第三个咯）。<br>输出结果如下：</li></ul><img src="/2022/04/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/5.png" class><p>发现结果正确，都是0。</p><h1>课后练习和答案（非标答）</h1><blockquote><p>一 列举出机器学习的类型，并说明分类的标准</p></blockquote><p>答：监督学习、无监督学习、半监督学习，分类标准是已有的数据集是否有标签。</p><blockquote><p>二 解释机器学习术语：什么是特征，什么是标签，什么是机器学习模型</p></blockquote><p>答：特征：用于描述模型的输入数据。标签：数据的输出结果。机器学习模型：将样本特征映射到标签的一种方法。</p><blockquote><p>自己导入keras的波士顿房价数据集（boston_housing），并判断哪些是标签字段。<br>参考两个机器学习代码，使用LinearRegression线性回归算法对波士顿房价数据集进行建模。</p></blockquote><p>两者一起答：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> boston_housing</span><br><span class="line">(X_train_data, y_train_label), (X_test_data, y_test_label) = boston_housing.load_data()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据集张量形状：&quot;</span>, X_train_data.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一个样本数据：\n&quot;</span>, X_train_data[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一个样本标签：\n&quot;</span>, y_train_label[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(X_train_data, y_train_label)</span><br><span class="line"></span><br><span class="line">y_pred = model.predict(X_test_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;房价的真值(测试集)&#x27;</span>,y_test_label)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;预测的房价(测试集)&#x27;</span>,y_pred)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;给模型评分：&quot;</span>, model.score(X_test_data, y_test_label))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;作者大四在读，恰逢毕设时间，毕设选题将会以GAN技术（生成式对抗网络技术）为核心展开工作。然而作者在这之前，并没有任何与智能图片生成——也就是“有关于深度学习的图像生成技术”打过交道。作者首先接触到了&lt;a href=&quot;https://www.bili</summary>
      
    
    
    
    <category term="人工智能学习路线" scheme="https://yigexiaogai.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    
    <category term="从零开始机器学习" scheme="https://yigexiaogai.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="人工智能" scheme="https://yigexiaogai.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="机器学习，毕设相关" scheme="https://yigexiaogai.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%8C%E6%AF%95%E8%AE%BE%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://yigexiaogai.github.io/2022/03/28/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://yigexiaogai.github.io/2022/03/28/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-03-28T13:56:37.000Z</published>
    <updated>2022-04-02T13:08:20.702Z</updated>
    
    <content type="html"><![CDATA[<h1>我的第一篇博客</h1><h2 id="前言">前言</h2><p>嗨，屏幕前的你！欢迎来到Gai的第一篇博客！（这句话同样献给我自己）<br>我曾经试过使用各种方式来描写这段开头，但最终都放弃了，因为我实在有太多的话想说而不知从何开始。总之，当你看到这一篇博客的时候，就说明我成功地将我的生活、我的世界分享给了你。<br>So, come on and let’s be friends!</p><img src="/2022/03/28/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/2022-03-29-19-05-39.png" class title="This is an example image"><h2 id="诞生">诞生</h2><p>很显然，在这样一个信息化的世界中，个人博客已经成为了一个技术宅的标配。对于极客们来说，无论是信息输出还是信息输入，博客都是一个良好的渠道——当然，大部分人可能仅限于“输入”的部分吧。</p><p>CSDN、博客园、知乎、公众号，甚至是B站，它们都可以成为一种“博客”，人人都能在平台的账号中创作+管理+共享内容。可对我来说，这大概还不够cool~事实上我也有想过啦，和有的同学一样在CSDN上写个人博客，毕竟我是个啥都不懂的小白，个人主页什么的，一定超级麻烦的吧！（现在我依然这么想！）</p><p>应该是在大二的时候，我在一门技术相关的课程上遇到了一个无法解决的问题（具体是什么课程已经忘记了），于是自然而然我去CSDN上寻找答案，巧的是，我看到了一个似乎是来自同一所学校的同学写的博客，顺藤摸瓜我找到了他的个人主页。这个主页经典而又美观，在彩色的背景上整齐摆放着各种技术内容，右下角有一虚拟角色可以互动，背景的两侧有能与鼠标交互的几何形状。在一番求证之后，我确信，博主正正好好就是坐在我旁边的同学。他是个转专业来的学生，平时默默无闻，因此我和他不熟。按捺不住内心的激动，我偷瞄了一眼他的电脑屏幕，他还是不动声色地写着代码，从画面上可以看出是某种小游戏。我不好意思与他说明，只是在内心中觉得：wow，这太酷了！</p><p><em>我身边大佬的个人博客（我偷偷贴了）</em>：<a href="https://jinjis.cn/">大佬的博客</a></p><p>博客最大的用处我想应该有两个：分享和整理。哼，别看我平时乱糟糟的，我其实很爱整理。我会把喜欢的电影、漫画资源和用过的软件安装包放在移动硬盘里；我会把我的学习笔记分门别类重新整理在Goodnotes中；我会把剪辑视频用到的素材都好好地整理备份；从两年前开始，我会把所有旅行相关的事物贴在一本精致的小本本里，包括车票、门票等等，接着在旁边批注或者写下心得，有时还会画下图案……可唯独，唯独我的programs只能躺在“用户”的“文档”中（也可能是repo)。所以当看到大佬的个人博客时，我真的狠狠心动了。</p><p>于是我下定决心克服万难，创造一个属于我自己的小天地，在这里，我不仅可以将我以前整理好的东西迁入，更可以添加新的事物，比如我的项目、代码，哦对，我也许可以开始写日记！（正经人谁写日记啊）可以加一个健身打卡哈哈，又或者是有感而发的漫评、影评、书评……</p><h2 id="过程">过程</h2><p>在很早之前我就开始准备筹划个人博客了，但可供选择的框架和平台很多，要学习的事物也很多。最终我选择hexo+github部署的方法实现静态博客，因为这样既不用花钱买服务器，也（可以）不用花钱买域名，相当方便。在这个过程中，我逐渐接触了nodejs、npm、hexo、命令行语言、markdown……各种各样的新鲜东西。总之，进行这样一个全新的项目更让我感觉到自己的无知与渺小。</p><p>在这里我贴出我在搭建个人博客时用到的各种资源：<br>参考视频：<a href="https://www.bilibili.com/video/BV1Yb411a7ty?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">手把手教你从0开始搭建自己的个人博客</a>、<a href="https://www.bilibili.com/video/BV1hJ411X75X?spm_id_from=333.337.search-card.all.click">15分钟快速上手Markdown教程</a><br>参考文档：<a href="https://hexo.io/zh-cn/">hexo 官方文档</a>、<a href="https://www.runoob.com/markdown/md-tutorial.html">markdown使用教程</a>、<a href="https://butterfly.js.org/">butterfly主题官方文档</a><br>如果看到这里的你也想搭建自己的博客，不妨看看这些资源，也许对你有用！</p><h2 id="未来">未来</h2><p>在接下来的日子里，本站主要专注于分享自己的学习笔记、项目代码、个人感悟等，另外，我还会继续改善美化本站，尝试更多的魔改方法，尝试更多新鲜有趣的事情！希望读者也能够一起加油！fighting!</p><img src="/2022/03/28/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/2022-03-29-21-10-15.png" class title="This is an example image"> ]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;我的第一篇博客&lt;/h1&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;嗨，屏幕前的你！欢迎来到Gai的第一篇博客！（这句话同样献给我自己）&lt;br&gt;
我曾经试过使用各种方式来描写这段开头，但最终都放弃了，因为我实在有太多的话想说而不知从何开始。总之，当你看到这一篇博客的时</summary>
      
    
    
    
    <category term="hexo" scheme="https://yigexiaogai.github.io/categories/hexo/"/>
    
    
    <category term="hexo相关" scheme="https://yigexiaogai.github.io/tags/hexo%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yigexiaogai.github.io/2022/02/25/hello-world/"/>
    <id>https://yigexiaogai.github.io/2022/02/25/hello-world/</id>
    <published>2022-02-25T11:54:33.968Z</published>
    <updated>2022-02-25T11:54:33.968Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
